name: 🛡️ StellarSpeak Site Guardian

on:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test Type'
        required: false
        default: 'quick'
        type: choice
        options:
        - quick
        - full

jobs:
  site-monitoring:
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/playwright:v1.49.0-jammy
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        # ❌ إزالة السطر التالي - هذا يسبب المشكلة
        # cache: 'npm'

    - name: 🗂️ Cache Playwright Browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: playwright-${{ runner.os }}-v1.49.0
        restore-keys: playwright-${{ runner.os }}-

    - name: 📦 Install Dependencies
      run: npm install -D @playwright/test

    - name: 🔍 Debug Environment
      run: |
        echo "📊 Environment Info:"
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Working directory: $(pwd)"
        echo "Files: $(ls -la)"
        echo "Playwright version: $(npx playwright --version)"

    - name: 🛡️ Run Site Guardian Tests
      id: tests
      run: |
        echo "🔍 Starting Playwright tests..."
        
        # تشغيل الاختبارات مع معالجة محسنة
        if timeout 600s npx playwright test --reporter=list; then
          echo "✅ Tests completed successfully"
          EXIT_CODE=0
        else
          EXIT_CODE=$?
          echo "⚠️ Tests completed with exit code: $EXIT_CODE"
        fi
        
        # البحث عن ملف النتائج من Playwright
        RESULTS_FOUND=false
        
        # محاولة إيجاد ملف النتائج في مواقع مختلفة
        for path in "./test-results.json" "./results.json" "./test-results/results.json" "./playwright-report/results.json"; do
          if [ -f "$path" ]; then
            echo "📊 Found results at: $path"
            cp "$path" test-results.json
            RESULTS_FOUND=true
            break
          fi
        done
        
        # إذا لم نجد ملف نتائج، أنشئ واحداً بناءً على exit code
        if [ "$RESULTS_FOUND" = false ]; then
          echo "❌ No results file found, creating based on exit code: $EXIT_CODE"
          
          if [ $EXIT_CODE -eq 0 ]; then
            # نجحت كل الاختبارات
            EXPECTED_TESTS=15
            echo "{\"stats\":{\"expected\":$EXPECTED_TESTS,\"passed\":$EXPECTED_TESTS,\"failed\":0,\"skipped\":0},\"duration\":5000}" > test-results.json
          else
            # فشل في الاختبارات
            EXPECTED_TESTS=15
            echo "{\"stats\":{\"expected\":$EXPECTED_TESTS,\"passed\":0,\"failed\":$EXPECTED_TESTS,\"skipped\":0},\"duration\":3000}" > test-results.json
          fi
        fi
        
        echo "📄 Final test results file:"
        cat test-results.json
        echo "tests_completed=true" >> $GITHUB_OUTPUT
      env:
        SITE_URL: https://www.stellarspeak.online
        TEST_TYPE: ${{ github.event.inputs.test_type || 'quick' }}
        MONITOR_EMAIL: ${{ secrets.MONITOR_EMAIL }}
        MONITOR_PASSWORD: ${{ secrets.MONITOR_PASSWORD }}
      timeout-minutes: 12

    - name: 📊 Parse Test Results
      run: |
        node -e "
        const fs = require('fs');
        
        console.log('🔍 Parsing test results...');
        
        let testResults = {
          stats: { expected: 15, passed: 0, failed: 15, skipped: 0 },
          duration: 3000
        };
        
        try {
          if (fs.existsSync('test-results.json')) {
            const content = fs.readFileSync('test-results.json', 'utf8').trim();
            console.log('📄 Raw content length:', content.length);
            console.log('📋 Content preview:', content.substring(0, 200));
            
            if (content && content !== '') {
              testResults = JSON.parse(content);
              console.log('✅ Successfully parsed results:', JSON.stringify(testResults.stats, null, 2));
            }
          } else {
            console.log('❌ Test results file not found, using defaults');
          }
        } catch (error) {
          console.log('⚠️ Error reading results, using defaults:', error.message);
        }
        
        const stats = testResults.stats || {};
        const total = stats.expected || 0;
        const passed = stats.passed || 0;
        const failed = stats.failed || 0;
        const skipped = stats.skipped || 0;
        const duration = (testResults.duration / 1000).toFixed(1);
        
        // تحسين منطق تحديد الحالة
        let status;
        if (total === 0) {
          status = '🔴 NO_TESTS';
        } else if (failed > 0) {
          status = '🔴 FAILED';
        } else if (passed > 0) {
          status = '✅ PASSED';
        } else {
          status = '⚠️ UNKNOWN';
        }
        
        const timestamp = new Date().toLocaleString('ar-SA-u-nu-latn', {timeZone: 'Asia/Riyadh'});
        const runNumber = '${{ github.run_number }}';
        const runId = '${{ github.run_id }}';
        const repoName = '${{ github.repository }}';
        const actor = '${{ github.actor }}';
        const eventName = '${{ github.event_name }}';
        
        let message = '🛡️ *StellarSpeak Site Guardian Report*\\\\n';
        message += '━━━━━━━━━━━━━━━━━━━━━━\\\\n\\\\n';
        
        message += '📊 *نتائج الفحص:*\\\\n';
        message += '• الحالة: ' + status + '\\\\n';
        message += '• نجح: ✅ ' + passed + ' اختبار\\\\n';
        message += '• فشل: ❌ ' + failed + ' اختبار\\\\n';
        message += '• تم تخطيه: ⏭️ ' + skipped + ' اختبار\\\\n';
        message += '• المجموع: 📈 ' + total + ' اختبار\\\\n';
        message += '• مدة التنفيذ: ⏱️ ' + duration + ' ثانية\\\\n\\\\n';
        
        message += '🔍 *معلومات الفحص:*\\\\n';
        message += '• الموقع: 🌐 [stellarspeak.online](https://www.stellarspeak.online)\\\\n';
        message += '• الوقت: 🕐 ' + timestamp + '\\\\n';
        message += '• نوع التشغيل: 🔄 ' + (eventName === 'schedule' ? 'تلقائي (كل 12 ساعة)' : 'يدوي') + '\\\\n';
        message += '• رقم التشغيل: #' + runNumber + '\\\\n\\\\n';
        
        if (total === 0) {
          message += '🚨 *خطأ تقني - لم يتم تشغيل اختبارات:*\\\\n';
          message += '━━━━━━━━━━━━━━━━━━━━━━\\\\n';
          message += '🔧 مشكلة في إعداد Playwright أو البيئة التشغيلية\\\\n';
          message += '🌐 قد يكون هناك مشكلة في الوصول للموقع أو Container\\\\n';
          message += '👨‍💻 يتطلب فحص السجلات التفصيلية والإعدادات\\\\n';
          message += '⚡ هذا يعني أن الموقع لم يتم فحصه فعلياً\\\\n\\\\n';
        } else if (failed > 0) {
          message += '⚠️ *تحذير - مشاكل مكتشفة:*\\\\n';
          message += '━━━━━━━━━━━━━━━━━━━━━━\\\\n';
          message += '🔴 تم اكتشاف *' + failed + ' مشكلة* تحتاج فحص فوري!\\\\n';
          message += '🔍 يُنصح بمراجعة التقرير المفصل للحصول على التفاصيل الكاملة\\\\n';
          message += '⚡ قد تؤثر هذه المشاكل على تجربة المستخدمين\\\\n\\\\n';
        } else if (passed > 0) {
          message += '✅ *ممتاز - الموقع يعمل بشكل مثالي!*\\\\n';
          message += '━━━━━━━━━━━━━━━━━━━━━━\\\\n';
          message += '🚀 جميع الاختبارات (' + passed + ') نجحت بلا أي مشاكل\\\\n';
          message += '💯 الأداء والوظائف تعمل بكفاءة عالية\\\\n';
          message += '🎯 لا حاجة لأي إجراء في الوقت الحالي\\\\n\\\\n';
        } else {
          message += '⚠️ *حالة غير معروفة:*\\\\n';
          message += '━━━━━━━━━━━━━━━━━━━━━━\\\\n';
          message += '🔍 تم تشغيل اختبارات لكن بدون نتائج واضحة\\\\n';
          message += '🔧 يُنصح بمراجعة السجلات والإعدادات\\\\n\\\\n';
        }
        
        message += '📋 *روابط مفيدة:*\\\\n';
        message += '• [عرض التقرير التفصيلي](https://github.com/' + repoName + '/actions/runs/' + runId + ')\\\\n';
        message += '• [جميع التشغيلات السابقة](https://github.com/' + repoName + '/actions)\\\\n';
        message += '• [الموقع المباشر](https://www.stellarspeak.online)\\\\n';
        
        fs.writeFileSync('telegram-message.txt', message);
        console.log('status=' + status);
        console.log('passed=' + passed);
        console.log('failed=' + failed);
        console.log('total=' + total);
        "
      continue-on-error: true

    - name: 🔍 Debug Secrets
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🔍 Checking Telegram Secrets..."
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
        if [ -n "${{ secrets.TELEGRAM_BOT_TOKEN }}" ]; then
          TOKEN_LENGTH=$(echo -n "${{ secrets.TELEGRAM_BOT_TOKEN }}" | wc -c)
          echo "✅ TELEGRAM_BOT_TOKEN is set (length: $TOKEN_LENGTH characters)"
        else
          echo "❌ TELEGRAM_BOT_TOKEN is NOT set - Please add it in repository secrets"
        fi
        
        if [ -n "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then
          echo "✅ TELEGRAM_CHAT_ID is set: ${{ secrets.TELEGRAM_CHAT_ID }}"
        else
          echo "❌ TELEGRAM_CHAT_ID is NOT set - Please add it in repository secrets"
        fi
        
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

    - name: 📤 Send Telegram Notification
      if: always()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message_file: telegram-message.txt
        format: markdown
        disable_web_page_preview: true

    - name: 📊 Upload Test Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: site-guardian-report-${{ github.run_number }}
        path: |
          test-results/
          playwright-report/
          test-results.json
          telegram-message.txt
        retention-days: 30
        if-no-files-found: warn

    - name: 🚨 Send Detailed Alert on Critical Failure
      if: failure()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          🚨 **CRITICAL: StellarSpeak Monitoring System Failure**
          
          ❌ **Issue:** Complete system failure during workflow execution
          ⏰ **Time:** $(date)
          🔧 **Run:** #${{ github.run_number }}
          
          🚀 **Action Required:** 
          • Manual site check immediately
          • Review GitHub Actions logs
          • Verify system configuration
          
          🔗 [View Detailed Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        format: markdown
