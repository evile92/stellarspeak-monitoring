name: 🛡️ StellarSpeak Site Guardian

on:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test Type'
        required: false
        default: 'quick'
        type: choice
        options:
        - quick
        - full

jobs:
  site-monitoring:
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/playwright:v1.56.0-jammy
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: 📦 Install Dependencies
      run: |
        echo "📦 Installing dev dependencies from package.json..."
        # سيقرأ package.json ويثبت @playwright/test
        npm install --only=dev
        echo "✅ Dependencies installed"

    - name: 🔍 Debug Environment
      run: |
        echo "📊 Environment Info:"
        echo "Node: $(node --version)"
        echo "NPM: $(npm --version)"
        echo "PWD: $(pwd)"
        echo "Files:"
        ls -la
        echo "Playwright:"
        npx playwright --version

    - name: 🛡️ Run Site Guardian Tests
      id: tests
      run: |
        echo "🔍 Starting Playwright tests..."
        echo "🌐 Target: $SITE_URL"
        
        # تشغيل الاختبارات - Playwright سيُنشئ test-results.json تلقائياً من config
        set +e
        npx playwright test
        EXIT_CODE=$?
        set -e
        
        echo "📊 Test execution finished with exit code: $EXIT_CODE"
        
        # التحقق من وجود ملف النتائج
        if [ -f "test-results.json" ]; then
          echo "✅ test-results.json found!"
          echo "📄 Content preview:"
          head -50 test-results.json
        else
          echo "❌ test-results.json NOT found!"
          echo "📁 Current directory files:"
          ls -la
          echo "📁 Searching for JSON files:"
          find . -name "*.json" -type f 2>/dev/null || true
          
          # إنشاء ملف نتائج فارغ بصيغة Playwright الصحيحة
          echo '{"suites":[],"errors":[],"stats":{"startTime":"'$(date -Iseconds)'","duration":0,"expected":0,"skipped":0,"unexpected":0,"flaky":0}}' > test-results.json
          echo "⚠️ Created empty test-results.json with Playwright format"
        fi
        
        echo "tests_exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
      env:
        SITE_URL: https://www.stellarspeak.online
        TEST_TYPE: ${{ github.event.inputs.test_type || 'quick' }}
        MONITOR_EMAIL: ${{ secrets.MONITOR_EMAIL }}
        MONITOR_PASSWORD: ${{ secrets.MONITOR_PASSWORD }}
      timeout-minutes: 12
      continue-on-error: true

    - name: 📊 Parse Test Results
      run: |
        node -e "
        const fs = require('fs');
        
        console.log('🔍 Parsing test results...');
        
        let testResults = { suites: [], errors: [], stats: {} };
        let failedTests = [];
        
        try {
          if (fs.existsSync('test-results.json')) {
            const content = fs.readFileSync('test-results.json', 'utf8').trim();
            if (content && content.length > 10) {
              testResults = JSON.parse(content);
              console.log('✅ Successfully parsed Playwright results');
            }
          } else {
            console.log('❌ test-results.json not found');
          }
        } catch (error) {
          console.error('⚠️ Error parsing results:', error.message);
        }

        // [!] إضافة: دالة جديدة للبحث عن الاختبارات الفاشلة
        function parseSuites(suites, parentTitle = '') {
          if (!suites) return;
          
          for (const suite of suites) {
            const currentTitle = parentTitle ? `${parentTitle} > ${suite.title}` : suite.title;
            
            // البحث عن الاختبارات (specs) داخل الـ suite
            if (suite.specs) {
              for (const spec of suite.specs) {
                // البحث عن أي نتيجة فاشلة (يأخذ retries بعين الاعتبار)
                const failedRun = spec.tests.flatMap(t => t.results).find(r => r.status === 'failed' || r.status === 'timedOut');
                
                if (failedRun) {
                  const testTitle = `${currentTitle} > ${spec.title}`;
                  let errorMsg = 'No error message';
                  
                  if (failedRun.error) {
                    errorMsg = failedRun.error.message ? failedRun.error.message.split('\n')[0] : (failedRun.error.value || 'Error');
                  }
                  
                  failedTests.push({
                    title: testTitle.replace(/^ > | > $/g, ''), // تنظيف الاسم
                    error: errorMsg.substring(0, 150) // تقصير رسالة الخطأ
                  });
                }
              }
            }
            
            // البحث في الـ suites المتداخلة (nested describes)
            if (suite.suites) {
              parseSuites(suite.suites, currentTitle);
            }
          }
        }
        
        // بدء البحث
        parseSuites(testResults.suites);

        const stats = testResults.stats || {};
        const expected = stats.expected || 0;
        const unexpected = stats.unexpected || 0;
        const skipped = stats.skipped || 0;
        const flaky = stats.flaky || 0;
        const total = expected + unexpected + skipped + flaky;
        const duration = (stats.duration / 1000).toFixed(1);
        
        let status;
        if (total === 0) status = '🔴 NO_TESTS';
        else if (unexpected > 0) status = '🔴 FAILED';
        else if (expected > 0) status = '✅ PASSED';
        else status = '⚠️ UNKNOWN';
        
        const timestamp = new Date().toLocaleString('ar-SA-u-nu-latn', {timeZone: 'Asia/Riyadh'});
        
        // [!] إصلاح: استخدام 8 backslashes (\\\\\\\\n) ليتم تفسيرها كـ \n في الملف
        let message = '🛡️ *StellarSpeak Site Guardian Report*\\\\\\\\n';
        message += '━━━━━━━━━━━━━━━━━━━━━━\\\\\\\\n\\\\\\\\n';
        
        message += '📊 *نتائج الفحص:*\\\\\\\\n';
        message += '• الحالة: ' + status + '\\\\\\\\n';
        message += '• نجح: ✅ ' + expected + ' اختبار\\\\\\\\n';
        message += '• فشل: ❌ ' + unexpected + ' اختبار\\\\\\\\n';
        message += '• تم تخطيه: ⏭️ ' + skipped + ' اختبار\\\\\\\\n';
        message += '• المجموع: 📈 ' + total + ' اختبار\\\\\\\\n';
        message += '• مدة التنفيذ: ⏱️ ' + duration + ' ثانية\\\\\\\\n\\\\\\\\n';
        
        message += '🔍 *معلومات الفحص:*\\\\\\\\n';
        message += '• الموقع: 🌐 [stellarspeak.online](https://www.stellarspeak.online)\\\\\\\\n';
        message += '• الوقت: 🕐 ' + timestamp + '\\\\\\\\n';
        message += '• نوع التشغيل: 🔄 ' + ('${{ github.event_name }}' === 'schedule' ? 'تلقائي (كل 12 ساعة)' : 'يدوي') + '\\\\\\\\n';
        message += '• رقم التشغيل: #${{ github.run_number }}\\\\\\\\n\\\\\\\\n';
        
        // [!] إضافة: تفاصيل الأخطاء
        if (unexpected > 0) {
          message += '⚠️ *تحذير - مشاكل مكتشفة (' + unexpected + '):*\\\\\\\\n';
          message += '━━━━━━━━━━━━━━━━━━━━━━\\\\\\\\n';
          
          message += '🔍 *تفاصيل الأخطاء (أول 5):*\\\\\\\\n';
          failedTests.slice(0, 5).forEach((test, index) => {
            // تنظيف النص لـ Markdown
            const cleanTitle = test.title.replace(/[*_`\[\]]/g, '');
            const cleanError = test.error.replace(/[*_`\[\]]/g, '');
            
            message += (index + 1) + '. *' + cleanTitle + '*\\\\\\\\n';
            message += '   └ 📄: `' + cleanError + '...`\\\\\\\\n\\\\\\\\n';
          });
          if (failedTests.length > 5) {
             message += '... والمزيد من الأخطاء في التقرير الكامل.\\\\\\\\n\\\\\\\\n';
          }

        } else if (total === 0) {
          message += '🚨 *خطأ تقني - لم يتم تشغيل اختبارات:*\\\\\\\\n';
          message += '━━━━━━━━━━━━━━━━━━━━━━\\\\\\\\n';
          message += '🔧 مشكلة في إعداد Playwright أو البيئة\\\\\\\\n\\\\\\\\n';

        } else if (expected > 0) {
          message += '✅ *ممتاز - الموقع يعمل بشكل مثالي!*\\\\\\\\n';
          message += '━━━━━━━━━━━━━━━━━━━━━━\\\\\\\\n';
          message += '🚀 جميع الاختبارات (' + expected + ') نجحت بلا مشاكل\\\\\\\\n\\\\\\\\n';
        }
        
        message += '📋 *روابط مفيدة:*\\\\\\\\n';
        message += '• [عرض التقرير](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\\\\\\\\n';
        message += '• [الموقع](https://www.stellarspeak.online)\\\\\\\\n';
        
        fs.writeFileSync('telegram-message.txt', message);
        console.log('✅ Telegram message created');
        console.log('Status:', status);
        console.log('Failed tests details:', JSON.stringify(failedTests, null, 2));
        "
      continue-on-error: true

    # ⬇️⬇️⬇️ هذا هو الإصلاح المضاف (تم تعديل الصيغة) ⬇️⬇️⬇️
    - name: 🛡️ Ensure Message File Exists (Fallback)
      if: always()
      run: |
        if [ ! -f "telegram-message.txt" ]; then
          echo "❌ 'Parse Test Results' step failed to create message file. Creating fallback."
          
          # [!] إصلاح: استخدام صيغة sh القياسية (MESSAGE="${MESSAGE}...") بدلاً من '+=
          MESSAGE="🚨 *CRITICAL: Workflow Failure*\\\\\\\\n"
          MESSAGE="${MESSAGE}━━━━━━━━━━━━━━━━━━━━━━\\\\\\\\n"
          MESSAGE="${MESSAGE}⚠️ *System Alert:*\\\\\\\\n"
          MESSAGE="${MESSAGE}The 'Parse Test Results' step failed to run correctly.\\\\\\\\n"
          MESSAGE="${MESSAGE}This means \`test-results.json\` might be missing or the Node.js script has an error.\\\\\\\\n\\\\\\\\n"
          MESSAGE="${MESSAGE}🔍 *Action Required:*\\\\\\\\n"
          MESSAGE="${MESSAGE}Please check the GitHub Actions logs immediately for the *'Parse Test Results'* step to see the error details.\\\\\\\\n\\\\\\\\n"
          MESSAGE="${MESSAGE}🔗 [View Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          
          echo "$MESSAGE" > telegram-message.txt
          echo "✅ Fallback 'telegram-message.txt' created."
        else
          echo "✅ 'telegram-message.txt' already exists. No fallback needed."
        fi
    # ⬆️⬆️⬆️ نهاية الإصلاح المضاف ⬆️⬆️⬆️

    - name: 🔍 Debug Secrets
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🔍 Checking Telegram Secrets..."
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
        if [ -n "${{ secrets.TELEGRAM_BOT_TOKEN }}" ]; then
          TOKEN_LENGTH=$(echo -n "${{ secrets.TELEGRAM_BOT_TOKEN }}" | wc -c)
          echo "✅ TELEGRAM_BOT_TOKEN is set (length: $TOKEN_LENGTH characters)"
        else
          echo "❌ TELEGRAM_BOT_TOKEN is NOT set"
        fi
        
        if [ -n "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then
          echo "✅ TELEGRAM_CHAT_ID is set: ${{ secrets.TELEGRAM_CHAT_ID }}"
        else
          echo "❌ TELEGRAM_CHAT_ID is NOT set"
        fi
        
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

    - name: 📤 Send Telegram Notification
      if: always()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message_file: telegram-message.txt
        format: markdown
        disable_web_page_preview: true

    - name: 📊 Upload Test Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: site-guardian-report-${{ github.run_number }}
        path: |
          test-results/
          playwright-report/
          test-results.json
          telegram-message.txt
        retention-days: 30
        if-no-files-found: warn

    - name: 🚨 Send Detailed Alert on Critical Failure
      if: failure()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          🚨 **CRITICAL: StellarSpeak Monitoring System Failure**
          
          ❌ **Issue:** Complete system failure during workflow execution
          ⏰ **Time:** $(date)
          🔧 **Run:** #${{ github.run_number }}
          
          🚀 **Action Required:** • Manual site check immediately
          • Review GitHub Actions logs
          • Verify system configuration
          
          🔗 [View Detailed Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        format: markdown
