name: 🛡️ StellarSpeak Site Guardian

on:
  schedule:
    # فحص كل 5 ساعات
    - cron: '0 */5 * * *'
    # فحص سريع كل ساعة في أوقات الذروة (8ص - 10م)
    - cron: '0 8-22 * * *'
  
  workflow_dispatch:
    inputs:
      test_type:
        description: 'نوع الفحص'
        required: true
        default: 'full'
        type: choice
        options:
        - quick
        - full
        - telegram-test

jobs:
  site-monitoring:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: 📦 Install Dependencies
      run: |
        npm install -D @playwright/test
        npx playwright install --with-deps chromium
      timeout-minutes: 10
    
    - name: 🛡️ Run Site Guardian Tests
      id: tests
      run: |
        npx playwright test --reporter=json > test-results.json 2>&1 || echo "Tests completed"
        echo "tests_completed=true" >> $GITHUB_OUTPUT
      env:
        SITE_URL: https://www.stellarspeak.online
        TEST_TYPE: ${{ github.event.inputs.test_type || 'full' }}
        MONITOR_EMAIL: ${{ secrets.MONITOR_EMAIL }}
        MONITOR_PASSWORD: ${{ secrets.MONITOR_PASSWORD }}
      timeout-minutes: 15
    
    - name: 📊 Parse Test Results
      id: parse_results
      run: |
        node -e "
        const fs = require('fs');
        try {
          let results = {};
          let stats = { expected: 0, passed: 0, failed: 0, skipped: 0 };
          
          if (fs.existsSync('test-results.json')) {
            const content = fs.readFileSync('test-results.json', 'utf8');
            results = JSON.parse(content);
            stats = results.stats || stats;
          }
          
          const total = stats.expected || 0;
          const passed = stats.passed || 0;
          const failed = stats.failed || 0;
          const skipped = stats.skipped || 0;
          
          const status = failed > 0 ? '🔴 FAILED' : '✅ PASSED';
          const timestamp = new Date().toLocaleString('ar-SA', {timeZone: 'Asia/Riyadh'});
          
          let message = '🛡️ **StellarSpeak Site Guardian Report**\n\n';
          message += '📊 **نتائج الفحص:**\n';
          message += '✅ نجح: ' + passed + ' اختبار\n';
          message += '❌ فشل: ' + failed + ' اختبار\n';
          message += '⏭️ تم تخطيه: ' + skipped + ' اختبار\n';
          message += '📈 المجموع: ' + total + ' اختبار\n\n';
          message += '⏰ **الوقت:** ' + timestamp + '\n';
          message += '🌐 **الموقع:** https://www.stellarspeak.online\n\n';
          
          if (failed > 0) {
            message += '⚠️ **تحذير:** تم اكتشاف ' + failed + ' مشكلة تحتاج فحص!\n';
            message += '🔍 **يُنصح بمراجعة التقرير المفصل**\n\n';
          } else if (passed > 0) {
            message += '✅ **ممتاز! الموقع يعمل بشكل طبيعي**\n';
            message += '🚀 **جميع الاختبارات نجحت بلا مشاكل**\n\n';
          } else {
            message += '⚠️ **تحذير:** لم يتم تشغيل اختبارات، قد تكون هناك مشكلة تقنية\n\n';
          }
          
          message += '📋 [عرض التقرير التفصيلي](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})';
          
          console.log('TELEGRAM_MESSAGE<<EOF');
          console.log(message);
          console.log('EOF');
          
          fs.writeFileSync('telegram-message.txt', message);
          
        } catch (error) {
          const errorTime = new Date().toLocaleString('ar-SA', {timeZone: 'Asia/Riyadh'});
          const errorMessage = '🚨 **خطأ في فحص موقع StellarSpeak**\n\n' +
            '❌ **المشكلة:** تعذر تحليل نتائج الفحص\n' +
            '⏰ **الوقت:** ' + errorTime + '\n' +
            '🔧 **مطلوب:** فحص يدوي للمشكلة\n\n' +
            '📋 [عرض تفاصيل الخطأ](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})';
          
          console.log('TELEGRAM_MESSAGE<<EOF');
          console.log(errorMessage);
          console.log('EOF');
          
          fs.writeFileSync('telegram-message.txt', errorMessage);
        }
        " >> $GITHUB_ENV
      continue-on-error: true
    
    - name: 📤 Send Telegram Notification
      if: always()
      run: |
        if [ -f "telegram-message.txt" ]; then
          MESSAGE=$(cat telegram-message.txt)
        else
          MESSAGE="🛡️ **StellarSpeak Site Check مكتمل**
          
        ⏰ **الوقت:** $(date '+%Y-%m-%d %H:%M:%S')
        🌐 **الموقع:** https://www.stellarspeak.online
        📋 **التفاصيل:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        fi
        
        # إرسال الرسالة عبر Telegram
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d "{
            \"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\",
            \"text\": \"$MESSAGE\",
            \"parse_mode\": \"Markdown\",
            \"disable_web_page_preview\": true
          }" || echo "⚠️ فشل في إرسال رسالة Telegram"
    
    - name: 📊 Upload Test Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: site-guardian-report-${{ github.run_number }}
        path: |
          test-results/
          playwright-report/
          test-results.json
          telegram-message.txt
        retention-days: 30

    # إرسال تقرير مفصل عند الفشل
    - name: 🚨 Send Detailed Alert on Critical Failure
      if: failure()
      run: |
        ALERT_MESSAGE="🚨 **تنبيه عاجل - مشكلة حرجة في الموقع**

        ❌ **حالة الفحص:** فشل كامل
        🔍 **المشكلة:** خطأ تقني في عملية الفحص نفسها
        ⏰ **الوقت:** $(date '+%Y-%m-%d %H:%M:%S')
        
        🌐 **الموقع:** https://www.stellarspeak.online
        📋 **السبب المحتمل:**
        • مشكلة في الاتصال بالموقع
        • خطأ في سكريبت الفحص
        • مشكلة في الخادم

        🔧 **مطلوب إجراء فوري:**
        1️⃣ فحص الموقع يدوياً
        2️⃣ مراجعة سجلات الخادم
        3️⃣ التأكد من حالة الموقع

        📋 [عرض تفاصيل الخطأ الكاملة](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"

        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d "{
            \"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\",
            \"text\": \"$ALERT_MESSAGE\",
            \"parse_mode\": \"Markdown\"
          }"
