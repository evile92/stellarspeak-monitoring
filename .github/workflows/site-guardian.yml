name: 🛡️ StellarSpeak Site Guardian

on:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'نوع الفحص'
        required: true
        default: 'quick'
        type: choice
        options:
        - quick
        - full
        - telegram-test

jobs:
  site-monitoring:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: 📦 Install Dependencies
      run: |
        npm install -D @playwright/test
        npx playwright install chromium
      timeout-minutes: 8
    
    - name: 🛡️ Run Simple Site Check
      id: site_check
      run: |
        echo "🔍 Starting StellarSpeak health check..."
        echo "📊 Site URL: $SITE_URL"
        
        # تشغيل Playwright مع معالجة أخطاء شاملة
        if timeout 120s npx playwright test --reporter=json:test-results.json; then
          echo "✅ Playwright tests completed successfully"
          TEST_STATUS="success"
        else
          EXIT_CODE=$?
          echo "⚠️ Playwright tests completed with exit code: $EXIT_CODE"
          TEST_STATUS="completed_with_issues"
          
          # إنشاء ملف نتائج يوضح المشكلة
          echo "{\"stats\":{\"expected\":1,\"passed\":0,\"failed\":1,\"skipped\":0},\"duration\":1000}" > test-results.json
        fi
        
        # التحقق من وجود ملف النتائج
        if [ -f "test-results.json" ]; then
          echo "📊 Test results file exists ($(wc -c < test-results.json) bytes)"
          cat test-results.json
        else
          echo "❌ No results file found - creating default"
          echo '{"stats":{"expected":1,"passed":0,"failed":1,"skipped":0},"duration":0}' > test-results.json
        fi
        
        echo "test_status=$TEST_STATUS" >> $GITHUB_OUTPUT
      env:
        SITE_URL: https://www.stellarspeak.online
        TEST_TYPE: ${{ github.event.inputs.test_type || 'quick' }}
      timeout-minutes: 12
    
    - name: 📊 Create Telegram Report
      id: create_report
      run: |
        node -e "
        const fs = require('fs');
        
        console.log('📊 Creating Telegram report...');
        
        let testResults = {
          stats: { expected: 1, passed: 0, failed: 1, skipped: 0 },
          duration: 0
        };
        
        // قراءة نتائج الاختبار
        try {
          if (fs.existsSync('test-results.json')) {
            const content = fs.readFileSync('test-results.json', 'utf8');
            if (content.trim()) {
              testResults = JSON.parse(content);
            }
          }
        } catch (error) {
          console.log('⚠️ Error reading test results, using defaults');
        }
        
        const stats = testResults.stats || {};
        const total = stats.expected || 0;
        const passed = stats.passed || 0;
        const failed = stats.failed || 0;
        const skipped = stats.skipped || 0;
        const duration = testResults.duration ? (testResults.duration / 1000).toFixed(1) : '0';
        
        // تحديد الحالة النهائية
        let finalStatus;
        let statusIcon;
        
        if (total === 0) {
          finalStatus = 'لم يتم تشغيل الاختبارات';
          statusIcon = '🔴';
        } else if (passed > 0 && failed === 0) {
          finalStatus = 'جميع الاختبارات نجحت';
          statusIcon = '✅';
        } else if (failed > 0) {
          finalStatus = 'بعض الاختبارات فشلت';
          statusIcon = '⚠️';
        } else {
          finalStatus = 'حالة غير واضحة';
          statusIcon = '❓';
        }
        
        const timestamp = new Date().toLocaleString('ar-SA-u-nu-latn', {timeZone: 'Asia/Riyadh'});
        const testType = '${{ github.event.inputs.test_type || \"تلقائي\" }}';
        
        // إنشاء رسالة التلغرام
        let message = '🛡️ *تقرير مراقبة StellarSpeak*\\n';
        message += '━━━━━━━━━━━━━━━━━━━━━━\\n\\n';
        
        message += statusIcon + ' *الحالة العامة:* ' + finalStatus + '\\n\\n';
        
        message += '📊 *تفاصيل النتائج:*\\n';
        message += '• نجح: ✅ ' + passed + '\\n';
        message += '• فشل: ❌ ' + failed + '\\n';
        message += '• تم تخطيه: ⏭️ ' + skipped + '\\n';
        message += '• المجموع: 📈 ' + total + '\\n';
        message += '• المدة: ⏱️ ' + duration + 's\\n\\n';
        
        message += '🔍 *معلومات إضافية:*\\n';
        message += '• الموقع: [stellarspeak.online](https://www.stellarspeak.online)\\n';
        message += '• الوقت: 🕐 ' + timestamp + '\\n';
        message += '• نوع الفحص: 🔧 ' + testType + '\\n';
        message += '• رقم التشغيل: #${{ github.run_number }}\\n\\n';
        
        // رسائل مختلفة حسب النتيجة
        if (passed > 0 && failed === 0) {
          message += '🎉 *ممتاز!* الموقع يعمل بشكل طبيعي\\n';
          message += '💚 جميع الفحوصات الأساسية نجحت\\n';
          message += '🎯 لا حاجة لأي تدخل في الوقت الحالي\\n';
        } else if (total === 0) {
          message += '🔧 *تنبيه تقني:* لم يتم تشغيل الاختبارات\\n';
          message += '⚠️ قد تكون هناك مشكلة في إعداد النظام\\n';
          message += '🔍 يُنصح بفحص يدوي للموقع كإجراء احترازي\\n';
        } else {
          message += '⚠️ *تحذير:* تم اكتشاف بعض المشاكل\\n';
          message += '🔍 يُنصح بمراجعة التقرير التفصيلي\\n';
          message += '🌐 الموقع قد يحتاج فحص إضافي\\n';
        }
        
        message += '\\n🔗 *الروابط:*\\n';
        message += '[📊 التقرير التفصيلي](https://github.com/evile92/stellarspeak-monitoring/actions/runs/${{ github.run_id }})\\n';
        message += '[🌐 زيارة الموقع](https://www.stellarspeak.online)';
        
        fs.writeFileSync('telegram-message.txt', message);
        console.log('📝 Telegram message created successfully');
        console.log('Status: ' + statusIcon + ' ' + finalStatus);
        "
      continue-on-error: true
    
    - name: 📤 Send Telegram Notification
      if: always()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message_file: telegram-message.txt
        format: markdown
        disable_web_page_preview: true
      continue-on-error: true
    
    - name: 📊 Upload Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: site-guardian-report-${{ github.run_number }}
        path: |
          test-results.json
          telegram-message.txt
        retention-days: 7
