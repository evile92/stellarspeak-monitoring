name: 🛡️ StellarSpeak Site Guardian

on:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test Type'
        required: false
        default: 'quick'
        type: choice
        options:
        - quick
        - full

jobs:
  site-monitoring:
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/playwright:v1.56.0-jammy
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: 📦 Install Dependencies
      run: |
        echo "📦 Installing dev dependencies from package.json..."
        # سيقرأ package.json ويثبت @playwright/test
        npm install --only=dev
        echo "✅ Dependencies installed"

    - name: 🔍 Debug Environment
      run: |
        echo "📊 Environment Info:"
        echo "Node: $(node --version)"
        echo "NPM: $(npm --version)"
        echo "PWD: $(pwd)"
        echo "Files:"
        ls -la
        echo "Playwright:"
        npx playwright --version

    - name: 🛡️ Run Site Guardian Tests
      id: tests
      run: |
        echo "🔍 Starting Playwright tests..."
        echo "🌐 Target: $SITE_URL"
        
        # تشغيل الاختبارات - Playwright سيُنشئ test-results.json تلقائياً من config
        set +e
        npx playwright test
        EXIT_CODE=$?
        set -e
        
        echo "📊 Test execution finished with exit code: $EXIT_CODE"
        
        # التحقق من وجود ملف النتائج
        if [ -f "test-results.json" ]; then
          echo "✅ test-results.json found!"
          echo "📄 Content preview:"
          head -50 test-results.json
        else
          echo "❌ test-results.json NOT found!"
          echo "📁 Current directory files:"
          ls -la
          echo "📁 Searching for JSON files:"
          find . -name "*.json" -type f 2>/dev/null || true
          
          # إنشاء ملف نتائج فارغ بصيغة Playwright الصحيحة
          echo '{"suites":[],"errors":[],"stats":{"startTime":"'$(date -Iseconds)'","duration":0,"expected":0,"skipped":0,"unexpected":0,"flaky":0}}' > test-results.json
          echo "⚠️ Created empty test-results.json with Playwright format"
        fi
        
        echo "tests_exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
      env:
        SITE_URL: https://www.stellarspeak.online
        TEST_TYPE: ${{ github.event.inputs.test_type || 'quick' }}
        MONITOR_EMAIL: ${{ secrets.MONITOR_EMAIL }}
        MONITOR_PASSWORD: ${{ secrets.MONITOR_PASSWORD }}
      timeout-minutes: 12
      continue-on-error: true

    - name: 📊 Parse Test Results
      run: |
        node -e "
        const fs = require('fs');
        
        console.log('🔍 Parsing test results...');
        
        // Default structure matching Playwright JSON reporter format
        let testResults = {
          suites: [],
          errors: [],
          stats: {
            startTime: new Date().toISOString(),
            duration: 0,
            expected: 0,
            skipped: 0,
            unexpected: 0,
            flaky: 0
          }
        };
        
        try {
          if (fs.existsSync('test-results.json')) {
            const content = fs.readFileSync('test-results.json', 'utf8').trim();
            console.log('📄 File size:', content.length, 'bytes');
            
            if (content && content.length > 10) {
              testResults = JSON.parse(content);
              console.log('✅ Successfully parsed Playwright results');
              console.log('📊 Stats:', JSON.stringify(testResults.stats, null, 2));
            }
          } else {
            console.log('❌ test-results.json not found');
          }
        } catch (error) {
          console.error('⚠️ Error parsing results:', error.message);
        }
        
        // Extract stats (Playwright format: expected, unexpected, skipped, flaky)
        const stats = testResults.stats || {};
        const expected = stats.expected || 0;  // Tests that passed
        const unexpected = stats.unexpected || 0;  // Tests that failed
        const skipped = stats.skipped || 0;
        const flaky = stats.flaky || 0;
        const total = expected + unexpected + skipped + flaky;
        const duration = (stats.duration / 1000).toFixed(1);
        
        // Determine status
        let status;
        if (total === 0) {
          status = '🔴 NO_TESTS';
        } else if (unexpected > 0) {
          status = '🔴 FAILED';
        } else if (expected > 0) {
          status = '✅ PASSED';
        } else {
          status = '⚠️ UNKNOWN';
        }
        
        const timestamp = new Date().toLocaleString('ar-SA-u-nu-latn', {timeZone: 'Asia/Riyadh'});
        
        let message = '🛡️ *StellarSpeak Site Guardian Report*\\\\n';
        message += '━━━━━━━━━━━━━━━━━━━━━━\\\\n\\\\n';
        
        message += '📊 *نتائج الفحص:*\\\\n';
        message += '• الحالة: ' + status + '\\\\n';
        message += '• نجح: ✅ ' + expected + ' اختبار\\\\n';
        message += '• فشل: ❌ ' + unexpected + ' اختبار\\\\n';
        message += '• تم تخطيه: ⏭️ ' + skipped + ' اختبار\\\\n';
        message += '• المجموع: 📈 ' + total + ' اختبار\\\\n';
        message += '• مدة التنفيذ: ⏱️ ' + duration + ' ثانية\\\\n\\\\n';
        
        message += '🔍 *معلومات الفحص:*\\\\n';
        message += '• الموقع: 🌐 [stellarspeak.online](https://www.stellarspeak.online)\\\\n';
        message += '• الوقت: 🕐 ' + timestamp + '\\\\n';
        message += '• نوع التشغيل: 🔄 ' + ('${{ github.event_name }}' === 'schedule' ? 'تلقائي (كل 12 ساعة)' : 'يدوي') + '\\\\n';
        message += '• رقم التشغيل: #${{ github.run_number }}\\\\n\\\\n';
        
        if (total === 0) {
          message += '🚨 *خطأ تقني - لم يتم تشغيل اختبارات:*\\\\n';
          message += '━━━━━━━━━━━━━━━━━━━━━━\\\\n';
          message += '🔧 مشكلة في إعداد Playwright أو البيئة\\\\n';
          message += '🌐 قد يكون هناك مشكلة في الوصول للموقع\\\\n';
          message += '👨‍💻 يتطلب فحص السجلات التفصيلية\\\\n\\\\n';
        } else if (unexpected > 0) {
          message += '⚠️ *تحذير - مشاكل مكتشفة:*\\\\n';
          message += '━━━━━━━━━━━━━━━━━━━━━━\\\\n';
          message += '🔴 تم اكتشاف *' + unexpected + ' مشكلة* تحتاج فحص!\\\\n';
          message += '🔍 راجع التقرير المفصل للتفاصيل\\\\n\\\\n';
        } else if (expected > 0) {
          message += '✅ *ممتاز - الموقع يعمل بشكل مثالي!*\\\\n';
          message += '━━━━━━━━━━━━━━━━━━━━━━\\\\n';
          message += '🚀 جميع الاختبارات (' + expected + ') نجحت بلا مشاكل\\\\n';
          message += '💯 الأداء والوظائف تعمل بكفاءة عالية\\\\n\\\\n';
        }
        
        message += '📋 *روابط مفيدة:*\\\\n';
        message += '• [عرض التقرير](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\\\\n';
        message += '• [جميع التشغيلات](https://github.com/${{ github.repository }}/actions)\\\\n';
        message += '• [الموقع](https://www.stellarspeak.online)\\\\n';
        
        fs.writeFileSync('telegram-message.txt', message);
        console.log('✅ Telegram message created');
        console.log('Status:', status);
        console.log('Expected:', expected, 'Unexpected:', unexpected, 'Total:', total);
        "
      continue-on-error: true

    - name: 🔍 Debug Secrets
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🔍 Checking Telegram Secrets..."
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
        if [ -n "${{ secrets.TELEGRAM_BOT_TOKEN }}" ]; then
          TOKEN_LENGTH=$(echo -n "${{ secrets.TELEGRAM_BOT_TOKEN }}" | wc -c)
          echo "✅ TELEGRAM_BOT_TOKEN is set (length: $TOKEN_LENGTH characters)"
        else
          echo "❌ TELEGRAM_BOT_TOKEN is NOT set"
        fi
        
        if [ -n "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then
          echo "✅ TELEGRAM_CHAT_ID is set: ${{ secrets.TELEGRAM_CHAT_ID }}"
        else
          echo "❌ TELEGRAM_CHAT_ID is NOT set"
        fi
        
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

    - name: 📤 Send Telegram Notification
      if: always()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message_file: telegram-message.txt
        format: markdown
        disable_web_page_preview: true

    - name: 📊 Upload Test Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: site-guardian-report-${{ github.run_number }}
        path: |
          test-results/
          playwright-report/
          test-results.json
          telegram-message.txt
        retention-days: 30
        if-no-files-found: warn

    - name: 🚨 Send Detailed Alert on Critical Failure
      if: failure()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          🚨 **CRITICAL: StellarSpeak Monitoring System Failure**
          
          ❌ **Issue:** Complete system failure during workflow execution
          ⏰ **Time:** $(date)
          🔧 **Run:** #${{ github.run_number }}
          
          🚀 **Action Required:** 
          • Manual site check immediately
          • Review GitHub Actions logs
          • Verify system configuration
          
          🔗 [View Detailed Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        format: markdown
